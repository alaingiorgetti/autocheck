
(** OCaml driver for random and enumerative testing *)

prelude "open QCheck"
prelude "open SCheck"

module QCheck.Gen
  syntax val int "QCheck.Gen.int"
  syntax val int_bound "QCheck.Gen.int_bound %1 %2"
  syntax val int_range "QCheck.Gen.int_range %1 %2 %3"
  syntax val array_size "QCheck.Gen.array_size %1 %2 %3"
end

module QCheck.Test
  syntax type cell "QCheck.Test.cell"
  syntax val make "QCheck.Test.make ~name:\"%2\" %1 %2"
  syntax val make_count "QCheck.Test.make ~name:\"%2\" ~count:%3 %1 %2"
end

module QCheck.QCheck_runner
  syntax val run_tests "QCheck_runner.run_tests [%1]"
end

module QCheck.QCheck
  syntax type arbitrary "QCheck.arbitrary"
  syntax val unit "QCheck.unit"
  syntax val bool "QCheck.bool"
  syntax val int "QCheck.int"
  syntax val int_range "QCheck.(int_range %1 %2)"
  syntax val int_bound "QCheck.(int_bound %1)"
  syntax val list "QCheck.list"
  syntax val list_of_size "QCheck.(list_of_size (Gen.return %1) %2)"
  syntax val array "QCheck.array"
  syntax val array_of_size "QCheck.(array_of_size (Gen.return %1) %2)"
  syntax val pair "QCheck.(pair %1 %2)"
  syntax val triple "QCheck.(triple %1 %2 %3)"
  syntax val quad "QCheck.(quad %1 %2 %3 %4)"
  syntax val option "QCheck.(option %1)"
end

module SCheck.Gen
  syntax type gen "SCheck.gen"
  syntax val unit "SCheck.Gen.unit"
  syntax val bool "SCheck.Gen.bool"
  syntax val int "SCheck.Gen.int"
  syntax val option "SCheck.Gen.opt %1"
end

module SCheck.SCheck
  syntax val bool "(SCheck.bool)"
  syntax type serial "SCheck.serial"
  syntax val unit "SCheck.unit"
  syntax val int_range "SCheck.(int_range %1 %2)"
  syntax val int_bound "SCheck.(int_bound %1)"
  syntax val option "SCheck.(option %1)"
  syntax val fact_of_size "SCheck.(fact_of_size %1)"
  syntax val permut_of_size "SCheck.(permut_of_size %1)"
end

module SCheck.Test
  syntax type cell "SCheck.Test.cell"
  syntax val make "(SCheck.Test.make ~name:\"%2\" %1 %2)"
end

module SCheck.TestResult
  syntax type verdict "SCheck.TestResult.verdict"
  syntax val exhaust "(SCheck.TestResult.exhaust %1)"
end

module SCheck.SCheck_runner
  syntax val run_tests "SCheck_runner.run_tests [%1]"
end
