<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE why3session PUBLIC "-//Why3//proof session v5//EN"
"http://why3.lri.fr/why3session.dtd">
<why3session shape_version="6">
<prover id="0" name="Coq" version="8.9.0" timelimit="0" steplimit="0" memlimit="0"/>
<prover id="1" name="CVC3" version="2.4.1" timelimit="5" steplimit="0" memlimit="1000"/>
<prover id="2" name="Z3" version="4.7.1" timelimit="1" steplimit="0" memlimit="1000"/>
<prover id="3" name="Alt-Ergo" version="2.2.0" timelimit="5" steplimit="0" memlimit="1000"/>
<prover id="4" name="CVC4" version="1.6" timelimit="1" steplimit="0" memlimit="1000"/>
<file format="whyml">
<path name=".."/><path name="ABF20.mlw"/>
<theory name="MapRelation" proved="true">
 <goal name="Deter" proved="true">
 <proof prover="3"><result status="valid" time="0.00" steps="6"/></proof>
 </goal>
 <goal name="Total" proved="true">
 <proof prover="2" timelimit="5"><result status="valid" time="0.08" steps="1540"/></proof>
 <proof prover="3"><result status="unknown" time="0.02"/></proof>
 <proof prover="4"><result status="valid" time="0.03" steps="200"/></proof>
 </goal>
</theory>
<theory name="NumOfExt" proved="true">
 <goal name="Numof_no_add" proved="true">
 <proof prover="2"><result status="valid" time="0.02" steps="12030"/></proof>
 <proof prover="3"><result status="valid" time="0.12" steps="57"/></proof>
 <proof prover="4"><result status="timeout" time="1.00" steps="127134"/></proof>
 </goal>
</theory>
<theory name="Interval" proved="true">
 <goal name="bint&#39;vc" expl="VC for bint" proved="true">
 <proof prover="3"><result status="valid" time="0.00" steps="2"/></proof>
 </goal>
 <goal name="low_bint&#39;vc" expl="VC for low_bint" proved="true">
 <proof prover="3"><result status="valid" time="0.00" steps="2"/></proof>
 </goal>
 <goal name="TotalStrictOrder.Trans" proved="true">
 <proof prover="3"><result status="valid" time="0.00" steps="10"/></proof>
 </goal>
 <goal name="TotalStrictOrder.Asymm" proved="true">
 <proof prover="3"><result status="valid" time="0.00" steps="8"/></proof>
 </goal>
 <goal name="TotalStrictOrder.Trichotomy" proved="true">
 <proof prover="3" timelimit="1"><result status="valid" time="0.00" steps="16"/></proof>
 </goal>
 <goal name="of_int&#39;vc" expl="VC for of_int" proved="true">
 <proof prover="3"><result status="valid" time="0.00" steps="4"/></proof>
 </goal>
 <goal name="of_int_quasi_inj" proved="true">
 <proof prover="2"><result status="valid" time="0.02" steps="3155"/></proof>
 <proof prover="3"><result status="valid" time="0.00" steps="16"/></proof>
 <proof prover="4"><result status="valid" time="0.02" steps="1738"/></proof>
 </goal>
 <goal name="of_intK" proved="true">
 <proof prover="3"><result status="valid" time="0.00" steps="15"/></proof>
 </goal>
 <goal name="numof_bint&#39;vc" expl="VC for numof_bint" proved="true">
 <proof prover="3"><result status="valid" time="0.00" steps="4"/></proof>
 </goal>
</theory>
<theory name="ModelTOOB" proved="true">
 <goal name="TOOB.Deter" proved="true">
 <proof prover="3"><result status="valid" time="0.00" steps="12"/></proof>
 </goal>
 <goal name="TOOB.Total" proved="true">
 <proof prover="2"><result status="valid" time="0.04" steps="1058"/></proof>
 <proof prover="3" timelimit="1"><result status="unknown" time="0.01"/></proof>
 <proof prover="4"><result status="valid" time="0.02" steps="6501"/></proof>
 </goal>
 <goal name="TOOB.Injec" proved="true">
 <proof prover="3"><result status="valid" time="0.00" steps="65"/></proof>
 </goal>
 <goal name="TOOB.Surjec" proved="true">
 <proof prover="2"><result status="timeout" time="1.00" steps="2506413"/></proof>
 <proof prover="3" timelimit="1"><result status="unknown" time="0.01"/></proof>
 <proof prover="4"><result status="unknown" time="0.06" steps="12827"/></proof>
 <transf name="inline_all" proved="true" >
  <goal name="Surjec.0" proved="true">
  <proof prover="1"><result status="unknown" time="1.53"/></proof>
  <proof prover="2" timelimit="5"><result status="valid" time="0.11" steps="109653"/></proof>
  <proof prover="3"><result status="unknown" time="0.02"/></proof>
  <proof prover="4"><result status="valid" time="0.02" steps="4849"/></proof>
  </goal>
 </transf>
 <transf name="split_vc" >
  <goal name="Surjec.0">
  <proof prover="2" timelimit="5" memlimit="2000"><result status="timeout" time="5.00" steps="14798519"/></proof>
  <proof prover="3" memlimit="2000"><result status="unknown" time="0.01"/></proof>
  <proof prover="4" timelimit="5" memlimit="2000"><result status="unknown" time="0.07" steps="12790"/></proof>
  <transf name="inline_goal" >
   <goal name="Surjec.0.0">
   <transf name="split_all_full" >
    <goal name="Surjec.0.0.0">
    <proof prover="2" timelimit="5" memlimit="2000"><result status="timeout" time="5.00" steps="10966713"/></proof>
    <proof prover="3" memlimit="2000"><result status="unknown" time="0.00"/></proof>
    <proof prover="4" timelimit="5" memlimit="2000"><result status="unknown" time="0.05" steps="13169"/></proof>
    <transf name="inline_goal" >
     <goal name="Surjec.0.0.0.0">
     <proof prover="2" timelimit="30" memlimit="4000"><result status="timeout" time="30.00" steps="64260238"/></proof>
     <proof prover="3" timelimit="30" memlimit="4000"><result status="unknown" time="0.00"/></proof>
     <proof prover="4" timelimit="30" memlimit="4000"><result status="unknown" time="0.07" steps="13177"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
</theory>
<theory name="Proposition2" proved="true">
 <goal name="ex_rel_permut" proved="true">
 <proof prover="0"><path name="ABF20_Proposition2_ex_rel_permut_1.v"/><result status="valid" time="0.32"/></proof>
 <proof prover="2" timelimit="5" memlimit="2000"><result status="timeout" time="5.00" steps="9066358"/></proof>
 <proof prover="3" memlimit="2000"><result status="unknown" time="0.03"/></proof>
 <proof prover="4" timelimit="5" memlimit="2000"><result status="unknown" time="0.07" steps="13104"/></proof>
 <transf name="inline_goal" >
  <goal name="ex_rel_permut.0">
  <transf name="split_all_full" >
   <goal name="ex_rel_permut.0.0">
   <proof prover="2" timelimit="5"><result status="timeout" time="5.00" steps="8226330"/></proof>
   <proof prover="3" timelimit="30" memlimit="4000"><result status="unknown" time="0.01"/></proof>
   <proof prover="4" timelimit="30" memlimit="4000"><result status="unknown" time="0.05" steps="13483"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="Proposition2" proved="true">
 <proof prover="2" timelimit="5" memlimit="2000"><result status="timeout" time="5.00" steps="8819895"/></proof>
 <proof prover="3" memlimit="2000"><result status="unknown" time="0.01"/></proof>
 <proof prover="4" timelimit="5" memlimit="2000"><result status="unknown" time="0.08" steps="13239"/></proof>
 <transf name="destruct" proved="true" arg1="ex_rel_permut">
  <goal name="Proposition2.0" proved="true">
  <transf name="exists" proved="true" arg1="rel_permut">
   <goal name="Proposition2.0.0" proved="true">
   <transf name="split_goal_full" proved="true" >
    <goal name="Proposition2.0.0.0" proved="true">
    <transf name="unfold" proved="true" arg1="bijective">
     <goal name="Proposition2.0.0.0.0" proved="true">
     <transf name="split_goal_full" proved="true" >
      <goal name="Proposition2.0.0.0.0.0" proved="true">
      <proof prover="2"><result status="timeout" time="2.00" steps="4584589"/></proof>
      <proof prover="3" timelimit="1"><result status="unknown" time="0.03"/></proof>
      <proof prover="4"><result status="unknown" time="0.20" steps="14428"/></proof>
      <transf name="inline_goal" proved="true" >
       <goal name="Proposition2.0.0.0.0.0.0" proved="true">
       <transf name="split_all_full" proved="true" >
        <goal name="Proposition2.0.0.0.0.0.0.0" proved="true">
        <proof prover="4"><result status="valid" time="0.04" steps="8771"/></proof>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
      <goal name="Proposition2.0.0.0.0.1" proved="true">
      <proof prover="2"><result status="timeout" time="1.00" steps="2395210"/></proof>
      <proof prover="3" timelimit="1"><result status="unknown" time="0.01"/></proof>
      <proof prover="4"><result status="unknown" time="0.08" steps="14125"/></proof>
      <transf name="inline_goal" proved="true" >
       <goal name="Proposition2.0.0.0.0.1.0" proved="true">
       <transf name="intros" proved="true" arg1="j">
        <goal name="Proposition2.0.0.0.0.1.0.0" proved="true">
        <proof prover="2"><result status="timeout" time="1.00" steps="1027413"/></proof>
        <proof prover="3" timelimit="1"><result status="unknown" time="0.01"/></proof>
        <proof prover="4"><result status="unknown" time="0.07" steps="13130"/></proof>
        <transf name="cut" proved="true" arg1="(exists x:a. rel x (bint2a j))">
         <goal name="Proposition2.0.0.0.0.1.0.0.0" proved="true">
         <proof prover="2"><result status="valid" time="0.03" steps="38099"/></proof>
         <proof prover="3" timelimit="1"><result status="unknown" time="0.03"/></proof>
         <proof prover="4"><result status="unknown" time="0.09" steps="13365"/></proof>
         </goal>
         <goal name="Proposition2.0.0.0.0.1.0.0.1" expl="asserted formula" proved="true">
         <proof prover="2"><result status="timeout" time="1.00" steps="1887032"/></proof>
         <proof prover="3" timelimit="1"><result status="unknown" time="0.03"/></proof>
         <proof prover="4"><result status="unknown" time="0.07" steps="12852"/></proof>
         <transf name="apply" proved="true" arg1="Surjec2">
         </transf>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="Proposition2.0.0.1" proved="true">
    <proof prover="2"><result status="timeout" time="1.00" steps="2526450"/></proof>
    <proof prover="3" timelimit="1"><result status="unknown" time="0.03"/></proof>
    <proof prover="4"><result status="unknown" time="0.09" steps="13167"/></proof>
    <transf name="inline_goal" proved="true" >
     <goal name="Proposition2.0.0.1.0" proved="true">
     <transf name="exists" proved="true" arg1="a2bint">
      <goal name="Proposition2.0.0.1.0.0" proved="true">
      <proof prover="2"><result status="timeout" time="1.00" steps="3352731"/></proof>
      <proof prover="3" timelimit="1"><result status="unknown" time="0.01"/></proof>
      <proof prover="4"><result status="unknown" time="0.11" steps="17073"/></proof>
      <transf name="split_vc" proved="true" >
       <goal name="Proposition2.0.0.1.0.0.0" proved="true">
       <proof prover="2"><result status="valid" time="0.03" steps="42830"/></proof>
       <proof prover="3" timelimit="1"><result status="unknown" time="0.03"/></proof>
       <proof prover="4"><result status="unknown" time="0.08" steps="16843"/></proof>
       </goal>
       <goal name="Proposition2.0.0.1.0.0.1" proved="true">
       <proof prover="4"><result status="valid" time="0.04" steps="8444"/></proof>
       </goal>
       <goal name="Proposition2.0.0.1.0.0.2" proved="true">
       <proof prover="4"><result status="valid" time="0.04" steps="8482"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 <transf name="inline_goal" >
  <goal name="Proposition2.0">
  <transf name="split_all_full" >
   <goal name="Proposition2.0.0">
   <proof prover="2"><result status="timeout" time="1.00" steps="1713008"/></proof>
   <proof prover="3" timelimit="1"><result status="unknown" time="0.02"/></proof>
   <proof prover="4"><result status="unknown" time="0.18" steps="13506"/></proof>
   <transf name="inline_goal" >
    <goal name="Proposition2.0.0.0">
    <proof prover="2"><result status="timeout" time="1.00" steps="1653817"/></proof>
    <proof prover="3" timelimit="1"><result status="unknown" time="0.02"/></proof>
    <proof prover="4"><result status="unknown" time="0.05" steps="14195"/></proof>
    <transf name="inline_goal" >
     <goal name="Proposition2.0.0.0.0">
     <proof prover="2"><result status="timeout" time="1.00" steps="1508436"/></proof>
     <proof prover="3" timelimit="1"><result status="unknown" time="0.03"/></proof>
     <proof prover="4"><result status="unknown" time="0.06" steps="14276"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
</theory>
<theory name="MapGraph" proved="true">
 <goal name="arrow&#39;vc" expl="VC for arrow" proved="true">
 <proof prover="3"><result status="valid" time="0.00" steps="4"/></proof>
 </goal>
 <goal name="Trans" proved="true">
 <proof prover="3"><result status="valid" time="0.00" steps="20"/></proof>
 </goal>
 <goal name="Asymm" proved="true">
 <proof prover="3"><result status="valid" time="0.01" steps="16"/></proof>
 </goal>
 <goal name="Trichotomy" proved="true">
 <proof prover="3"><result status="valid" time="0.01" steps="29"/></proof>
 <proof prover="4"><result status="valid" time="0.03" steps="5427"/></proof>
 </goal>
 <goal name="Source_inj" proved="true">
 <proof prover="3"><result status="valid" time="0.00" steps="16"/></proof>
 <proof prover="4"><result status="valid" time="0.02" steps="5235"/></proof>
 </goal>
</theory>
<theory name="ModelTOTO" proved="true">
 <goal name="TOTO.Trans" proved="true">
 <proof prover="3"><result status="valid" time="0.01" steps="26"/></proof>
 </goal>
 <goal name="TOTO.Asymm" proved="true">
 <proof prover="3"><result status="valid" time="0.01" steps="22"/></proof>
 </goal>
 <goal name="TOTO.Trichotomy" proved="true">
 <proof prover="3"><result status="valid" time="0.01" steps="24"/></proof>
 </goal>
 <goal name="TOTO.V.Trans" proved="true">
 <proof prover="3"><result status="valid" time="0.01" steps="26"/></proof>
 </goal>
 <goal name="TOTO.V.Asymm" proved="true">
 <proof prover="3"><result status="valid" time="0.00" steps="22"/></proof>
 </goal>
 <goal name="TOTO.V.Trichotomy" proved="true">
 <proof prover="3"><result status="valid" time="0.01" steps="41"/></proof>
 </goal>
</theory>
<theory name="STOI" proved="true">
 <goal name="Strict" proved="true">
 <proof prover="3"><result status="valid" time="0.00" steps="2"/></proof>
 </goal>
</theory>
<theory name="ModelSTOI" proved="true">
 <goal name="Trans" proved="true">
 <proof prover="3"><result status="valid" time="0.01" steps="26"/></proof>
 </goal>
 <goal name="Asymm" proved="true">
 <proof prover="3"><result status="valid" time="0.01" steps="22"/></proof>
 </goal>
 <goal name="Trichotomy" proved="true">
 <proof prover="3"><result status="valid" time="0.01" steps="35"/></proof>
 </goal>
</theory>
<theory name="Rank">
 <goal name="irrefl" proved="true">
 <proof prover="3"><result status="valid" time="0.00" steps="14"/></proof>
 </goal>
 <goal name="lt_int&#39;vc" expl="VC for lt_int" proved="true">
 <proof prover="3"><result status="valid" time="0.00" steps="4"/></proof>
 </goal>
 <goal name="numof_max" proved="true">
 <proof prover="2"><result status="timeout" time="1.00" steps="3594653"/></proof>
 <proof prover="3" timelimit="1"><result status="timeout" time="1.00"/></proof>
 <proof prover="4"><result status="timeout" time="1.00" steps="155138"/></proof>
 <transf name="intros" proved="true" arg1="lt,A,a">
  <goal name="numof_max.0" proved="true">
  <proof prover="2"><result status="timeout" time="1.00" steps="3682835"/></proof>
  <proof prover="3" timelimit="1"><result status="timeout" time="1.00"/></proof>
  <proof prover="4"><result status="timeout" time="1.00" steps="152858"/></proof>
  <transf name="rewrite" proved="true" arg1="Numof_no_add" arg2="with" arg3="(to_int a)">
   <goal name="numof_max.0.0" proved="true">
   <proof prover="3"><result status="valid" time="0.02" steps="49"/></proof>
   </goal>
   <goal name="numof_max.0.1" expl="rewrite premises" proved="true">
   <proof prover="3"><result status="valid" time="0.00" steps="9"/></proof>
   </goal>
   <goal name="numof_max.0.2" expl="rewrite premises" proved="true">
   <proof prover="3"><result status="valid" time="0.00" steps="30"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 <transf name="split_vc" >
  <goal name="numof_max.0">
  <proof prover="2"><result status="timeout" time="1.00" steps="3571140"/></proof>
  <proof prover="3" timelimit="1"><result status="timeout" time="1.00"/></proof>
  <proof prover="4"><result status="timeout" time="1.00" steps="164359"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="lt_map_bij_sto" proved="true">
 <proof prover="3"><result status="valid" time="0.03" steps="108"/></proof>
 </goal>
 <goal name="rank&#39;vc" expl="VC for rank" proved="true">
 <proof prover="2"><result status="valid" time="0.03" steps="34371"/></proof>
 <proof prover="3" timelimit="1"><result status="valid" time="0.04" steps="115"/></proof>
 <proof prover="4"><result status="valid" time="0.04" steps="10662"/></proof>
 </goal>
 <goal name="rank_lt_inj" proved="true">
 <proof prover="0"><path name="ABF20_Rank_rank_inj_1.v"/><result status="valid" time="0.51"/></proof>
 <proof prover="2"><result status="timeout" time="1.00" steps="1988938"/></proof>
 <proof prover="3" timelimit="1"><result status="timeout" time="1.00"/></proof>
 <proof prover="4"><result status="timeout" time="1.00" steps="119523"/></proof>
 <transf name="split_vc" >
  <goal name="rank_lt_inj.0">
  <proof prover="2"><result status="timeout" time="1.00" steps="2043230"/></proof>
  <proof prover="3" timelimit="1"><result status="timeout" time="1.00"/></proof>
  <proof prover="4"><result status="timeout" time="1.00" steps="122104"/></proof>
  <transf name="inline_goal" >
   <goal name="rank_lt_inj.0.0">
   <transf name="split_all_full" >
    <goal name="rank_lt_inj.0.0.0">
    <proof prover="2"><result status="timeout" time="1.00" steps="1038317"/></proof>
    <proof prover="3" timelimit="1"><result status="timeout" time="1.00"/></proof>
    <proof prover="4"><result status="timeout" time="1.00" steps="110242"/></proof>
    <transf name="split_vc" >
     <goal name="rank_lt_inj.0.0.0.0">
     <proof prover="2" timelimit="30" memlimit="4000"><result status="timeout" time="30.00" steps="17626395"/></proof>
     <proof prover="3" timelimit="30" memlimit="4000"><result status="timeout" time="30.00"/></proof>
     <proof prover="4" timelimit="30" memlimit="4000"><result status="timeout" time="30.00" steps="1474044"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="max&#39;vc" expl="VC for max" proved="true">
 <proof prover="3" timelimit="1"><result status="valid" time="0.04" steps="273"/></proof>
 <proof prover="4"><result status="valid" time="0.07" steps="14296"/></proof>
 </goal>
 <goal name="max_is_max" proved="true">
 <proof prover="2"><result status="valid" time="0.06" steps="109286"/></proof>
 <proof prover="3" timelimit="1"><result status="unknown" time="0.02"/></proof>
 <proof prover="4"><result status="timeout" time="1.00" steps="188383"/></proof>
 </goal>
 <goal name="succ&#39;vc" expl="VC for succ" proved="true">
 <proof prover="2"><result status="timeout" time="1.00" steps="2001302"/></proof>
 <proof prover="3" timelimit="1"><result status="timeout" time="1.00"/></proof>
 <proof prover="4"><result status="timeout" time="1.00" steps="150072"/></proof>
 <transf name="split_vc" proved="true" >
  <goal name="succ&#39;vc.0" expl="loop invariant init" proved="true">
  <proof prover="3"><result status="valid" time="0.01" steps="8"/></proof>
  </goal>
  <goal name="succ&#39;vc.1" expl="loop invariant init" proved="true">
  <proof prover="3"><result status="valid" time="0.00" steps="12"/></proof>
  </goal>
  <goal name="succ&#39;vc.2" expl="precondition" proved="true">
  <proof prover="2"><result status="valid" time="0.02" steps="10146"/></proof>
  <proof prover="3" timelimit="1"><result status="valid" time="0.01" steps="14"/></proof>
  <proof prover="4"><result status="valid" time="0.04" steps="9033"/></proof>
  </goal>
  <goal name="succ&#39;vc.3" expl="loop variant decrease" proved="true">
  <proof prover="3"><result status="valid" time="0.01" steps="20"/></proof>
  </goal>
  <goal name="succ&#39;vc.4" expl="loop invariant preservation" proved="true">
  <proof prover="3"><result status="valid" time="0.01" steps="20"/></proof>
  </goal>
  <goal name="succ&#39;vc.5" expl="loop invariant preservation" proved="true">
  <proof prover="3"><result status="valid" time="0.01" steps="28"/></proof>
  </goal>
  <goal name="succ&#39;vc.6" expl="precondition" proved="true">
  <proof prover="2"><result status="valid" time="0.62" steps="1044285"/></proof>
  <proof prover="3" timelimit="1"><result status="timeout" time="1.00"/></proof>
  <proof prover="4"><result status="timeout" time="1.00" steps="147090"/></proof>
  </goal>
  <goal name="succ&#39;vc.7" expl="loop invariant init" proved="true">
  <proof prover="3"><result status="valid" time="0.01" steps="21"/></proof>
  </goal>
  <goal name="succ&#39;vc.8" expl="loop invariant init" proved="true">
  <proof prover="3"><result status="valid" time="0.01" steps="93"/></proof>
  </goal>
  <goal name="succ&#39;vc.9" expl="precondition" proved="true">
  <proof prover="3"><result status="valid" time="0.01" steps="26"/></proof>
  </goal>
  <goal name="succ&#39;vc.10" expl="loop variant decrease" proved="true">
  <proof prover="3"><result status="valid" time="0.01" steps="36"/></proof>
  </goal>
  <goal name="succ&#39;vc.11" expl="loop invariant preservation" proved="true">
  <proof prover="3"><result status="valid" time="0.01" steps="36"/></proof>
  </goal>
  <goal name="succ&#39;vc.12" expl="loop invariant preservation" proved="true">
  <proof prover="3"><result status="valid" time="0.03" steps="183"/></proof>
  </goal>
  <goal name="succ&#39;vc.13" expl="loop variant decrease" proved="true">
  <proof prover="3"><result status="valid" time="0.01" steps="31"/></proof>
  </goal>
  <goal name="succ&#39;vc.14" expl="loop invariant preservation" proved="true">
  <proof prover="3"><result status="valid" time="0.01" steps="31"/></proof>
  </goal>
  <goal name="succ&#39;vc.15" expl="loop invariant preservation" proved="true">
  <proof prover="3"><result status="valid" time="0.02" steps="120"/></proof>
  </goal>
  <goal name="succ&#39;vc.16" expl="postcondition" proved="true">
  <proof prover="3"><result status="valid" time="0.01" steps="26"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="min&#39;vc" expl="VC for min" proved="true">
 <proof prover="2" timelimit="5"><result status="timeout" time="5.00" steps="4901952"/></proof>
 <proof prover="3"><result status="valid" time="0.05" steps="372"/></proof>
 <proof prover="4"><result status="valid" time="0.07" steps="15054"/></proof>
 </goal>
 <goal name="unrank&#39;vc" expl="VC for unrank" proved="true">
 <proof prover="2"><result status="valid" time="0.03" steps="41060"/></proof>
 <proof prover="3" timelimit="1"><result status="valid" time="0.01" steps="17"/></proof>
 <proof prover="4"><result status="valid" time="0.05" steps="11182"/></proof>
 <transf name="split_vc" proved="true" >
  <goal name="unrank&#39;vc.0" expl="precondition" proved="true">
  <proof prover="3"><result status="valid" time="0.01" steps="6"/></proof>
  <proof prover="4"><result status="valid" time="0.03" steps="9050"/></proof>
  </goal>
  <goal name="unrank&#39;vc.1" expl="precondition" proved="true">
  <proof prover="3"><result status="valid" time="0.00" steps="8"/></proof>
  </goal>
  <goal name="unrank&#39;vc.2" expl="precondition" proved="true">
  <proof prover="3"><result status="valid" time="0.01" steps="14"/></proof>
  <proof prover="4"><result status="valid" time="0.04" steps="9124"/></proof>
  </goal>
  <goal name="unrank&#39;vc.3" expl="precondition" proved="true">
  <proof prover="2" timelimit="30" memlimit="4000"><result status="valid" time="0.02" steps="10059"/></proof>
  <proof prover="3"><result status="valid" time="0.01" steps="14"/></proof>
  <proof prover="4"><result status="valid" time="0.03" steps="9548"/></proof>
  </goal>
  <goal name="unrank&#39;vc.4" expl="loop variant decrease" proved="true">
  <proof prover="3"><result status="valid" time="0.01" steps="18"/></proof>
  <proof prover="4"><result status="valid" time="0.04" steps="10445"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="rank_ltK">
 <proof prover="2"><result status="timeout" time="1.00" steps="1215124"/></proof>
 <proof prover="3" timelimit="1"><result status="timeout" time="1.00"/></proof>
 <proof prover="4"><result status="timeout" time="1.00" steps="192302"/></proof>
 <transf name="split_vc" >
  <goal name="rank_ltK.0">
  <proof prover="2"><result status="timeout" time="1.00" steps="1106376"/></proof>
  <proof prover="3" timelimit="1"><result status="timeout" time="1.00"/></proof>
  <proof prover="4"><result status="timeout" time="1.00" steps="171832"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="unrank_ltK" proved="true">
 <proof prover="0"><path name="ABF20_Rank_unrank_ltK_1.v"/><result status="valid" time="0.36"/></proof>
 <proof prover="2"><result status="valid" time="0.09" steps="141150"/></proof>
 <proof prover="3" timelimit="1"><result status="valid" time="0.30" steps="202"/></proof>
 <proof prover="4"><result status="timeout" time="1.00" steps="115911"/></proof>
 <transf name="intros" proved="true" arg1="lt, H, i">
  <goal name="unrank_ltK.0" proved="true">
  <transf name="assert" proved="true" arg1="(injective ((fun (y0:bint -&gt; bint -&gt; bool) (y1:bint) -&gt; rank y0 y1) @ lt))">
   <goal name="unrank_ltK.0.0" expl="asserted formula" proved="true">
   <transf name="apply" proved="true" arg1="rank_lt_inj">
    <goal name="unrank_ltK.0.0.0" expl="apply premises" proved="true">
    <transf name="apply" proved="true" arg1="H">
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="unrank_ltK.0.1" proved="true">
   <transf name="unfold" proved="true" arg1="injective" arg2="in" arg3="h">
    <goal name="unrank_ltK.0.1.0" proved="true">
    <transf name="apply" proved="true" arg1="h">
     <goal name="unrank_ltK.0.1.0.0" expl="apply premises" proved="true">
     <proof prover="3"><result status="valid" time="0.01" steps="30"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="lt_mapK" proved="true">
 <proof prover="3"><result status="timeout" time="5.00"/></proof>
 <transf name="split_vc" proved="true" >
  <goal name="lt_mapK.0" proved="true">
  <proof prover="2"><result status="valid" time="0.21" steps="418220"/></proof>
  <proof prover="3" timelimit="1"><result status="timeout" time="1.00"/></proof>
  <proof prover="4"><result status="timeout" time="1.00" steps="169930"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="Proposition1" proved="true">
 <proof prover="2"><result status="timeout" time="5.00" steps="3021461"/></proof>
 <proof prover="3" timelimit="1"><result status="unknown" time="0.02"/></proof>
 <proof prover="4"><result status="timeout" time="1.00" steps="147220"/></proof>
 <transf name="intros" proved="true" arg1="lt, T">
  <goal name="Proposition1.0" proved="true">
  <transf name="exists" proved="true" arg1="(rank lt)">
   <goal name="Proposition1.0.0" proved="true">
   <proof prover="2"><result status="timeout" time="1.00" steps="3072555"/></proof>
   <proof prover="3" timelimit="1"><result status="unknown" time="0.02"/></proof>
   <proof prover="4"><result status="timeout" time="1.00" steps="162861"/></proof>
   <transf name="split_goal_full" proved="true" >
    <goal name="Proposition1.0.0.0" proved="true">
    <transf name="unfold" proved="true" arg1="bijective">
     <goal name="Proposition1.0.0.0.0" proved="true">
     <transf name="split_goal_full" proved="true" >
      <goal name="Proposition1.0.0.0.0.0" proved="true">
      <proof prover="3"><result status="valid" time="0.01" steps="8"/></proof>
      </goal>
      <goal name="Proposition1.0.0.0.0.1" proved="true">
      <proof prover="3"><result status="unknown" time="0.03"/></proof>
      <transf name="unfold" proved="true" arg1="surjective">
       <goal name="Proposition1.0.0.0.0.1.0" proved="true">
       <transf name="intros" proved="true" arg1="j">
        <goal name="Proposition1.0.0.0.0.1.0.0" proved="true">
        <transf name="exists" proved="true" arg1="(unrank lt j)">
         <goal name="Proposition1.0.0.0.0.1.0.0.0" proved="true">
         <proof prover="3"><result status="valid" time="0.00" steps="30"/></proof>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="Proposition1.0.0.1" proved="true">
    <proof prover="3"><result status="valid" time="0.01" steps="8"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 <transf name="split_vc" >
  <goal name="Proposition1.0">
  <proof prover="2" timelimit="5" memlimit="2000"><result status="timeout" time="5.00" steps="6342325"/></proof>
  <proof prover="3" memlimit="2000"><result status="unknown" time="0.02"/></proof>
  <proof prover="4" timelimit="5" memlimit="2000"><result status="timeout" time="5.00" steps="762887"/></proof>
  <transf name="inline_goal" >
   <goal name="Proposition1.0.0">
   <transf name="split_all_full" >
    <goal name="Proposition1.0.0.0">
    <proof prover="2" timelimit="5" memlimit="2000"><result status="timeout" time="5.00" steps="9414086"/></proof>
    <proof prover="3" memlimit="2000"><result status="unknown" time="0.01"/></proof>
    <proof prover="4" timelimit="5" memlimit="2000"><result status="timeout" time="5.00" steps="577339"/></proof>
    <transf name="inline_goal" >
     <goal name="Proposition1.0.0.0.0">
     <proof prover="2" timelimit="30" memlimit="4000"><result status="timeout" time="30.00" steps="28060597"/></proof>
     <proof prover="3" timelimit="30" memlimit="4000"><result status="unknown" time="0.03"/></proof>
     <proof prover="4" timelimit="30" memlimit="4000"><result status="timeout" time="30.00" steps="1625405"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
</theory>
<theory name="Tests">
 <goal name="array_sto&#39;vc" expl="VC for array_sto" proved="true">
 <proof prover="3"><result status="valid" time="0.04" steps="200"/></proof>
 </goal>
 <goal name="rank_cancel&#39;vc" expl="VC for rank_cancel" proved="true">
 <proof prover="2"><result status="valid" time="0.04" steps="98006"/></proof>
 <proof prover="3" timelimit="1"><result status="valid" time="0.02" steps="10"/></proof>
 <proof prover="4"><result status="valid" time="0.10" steps="25696"/></proof>
 <transf name="split_vc" proved="true" >
  <goal name="rank_cancel&#39;vc.0" expl="precondition" proved="true">
  <proof prover="2"><result status="valid" time="0.02" steps="24442"/></proof>
  <proof prover="3" timelimit="1"><result status="valid" time="0.02" steps="10"/></proof>
  <proof prover="4"><result status="valid" time="0.07" steps="24097"/></proof>
  <transf name="split_vc" proved="true" >
   <goal name="rank_cancel&#39;vc.0.0" expl="precondition" proved="true">
   <proof prover="3"><result status="valid" time="0.02" steps="10"/></proof>
   <proof prover="4"><result status="valid" time="0.07" steps="24090"/></proof>
   </goal>
   <goal name="rank_cancel&#39;vc.0.1" expl="precondition" proved="true">
   <proof prover="2" timelimit="5" memlimit="2000"><result status="valid" time="0.02" steps="4726"/></proof>
   <proof prover="3" memlimit="2000"><result status="valid" time="0.02" steps="10"/></proof>
   <proof prover="4" timelimit="5" memlimit="2000"><result status="valid" time="0.07" steps="24090"/></proof>
   <transf name="inline_goal" proved="true" >
    <goal name="rank_cancel&#39;vc.0.1.0" expl="precondition" proved="true">
    <transf name="split_all_full" proved="true" >
     <goal name="rank_cancel&#39;vc.0.1.0.0" expl="precondition" proved="true">
     <proof prover="2" timelimit="30" memlimit="4000"><result status="valid" time="0.05" steps="100538"/></proof>
     <proof prover="3"><result status="valid" time="0.02" steps="10"/></proof>
     <proof prover="4" timelimit="30" memlimit="4000"><result status="valid" time="0.11" steps="26787"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="rank_cancel&#39;vc.1" expl="precondition" proved="true">
  <proof prover="2" timelimit="5" memlimit="2000"><result status="valid" time="0.02" steps="4690"/></proof>
  <proof prover="3" memlimit="2000"><result status="valid" time="0.02" steps="12"/></proof>
  <proof prover="4" timelimit="5" memlimit="2000"><result status="valid" time="0.06" steps="24114"/></proof>
  <transf name="inline_goal" proved="true" >
   <goal name="rank_cancel&#39;vc.1.0" expl="precondition" proved="true">
   <transf name="split_all_full" proved="true" >
    <goal name="rank_cancel&#39;vc.1.0.0" expl="VC for rank_cancel" proved="true">
    <proof prover="2" timelimit="5" memlimit="2000"><result status="valid" time="0.04" steps="101893"/></proof>
    <proof prover="3" memlimit="2000"><result status="valid" time="0.02" steps="14"/></proof>
    <proof prover="4" timelimit="5" memlimit="2000"><result status="valid" time="0.09" steps="26846"/></proof>
    <transf name="inline_goal" proved="true" >
     <goal name="rank_cancel&#39;vc.1.0.0.0" expl="VC for rank_cancel" proved="true">
     <transf name="split_all_full" proved="true" >
      <goal name="rank_cancel&#39;vc.1.0.0.0.0" expl="VC for rank_cancel" proved="true">
      <proof prover="2" timelimit="5" memlimit="2000"><result status="valid" time="0.05" steps="102009"/></proof>
      <proof prover="3" memlimit="2000"><result status="valid" time="0.02" steps="52"/></proof>
      <proof prover="4" timelimit="5" memlimit="2000"><result status="valid" time="0.11" steps="28775"/></proof>
      <transf name="inline_goal" proved="true" >
       <goal name="rank_cancel&#39;vc.1.0.0.0.0.0" expl="VC for rank_cancel" proved="true">
       <proof prover="2" timelimit="30" memlimit="4000"><result status="valid" time="0.05" steps="109803"/></proof>
       <proof prover="3"><result status="valid" time="0.02" steps="118"/></proof>
       <proof prover="4" timelimit="30" memlimit="4000"><result status="valid" time="0.11" steps="29322"/></proof>
       </goal>
      </transf>
      </goal>
      <goal name="rank_cancel&#39;vc.1.0.0.0.1" expl="VC for rank_cancel" proved="true">
      <proof prover="2" timelimit="5" memlimit="2000"><result status="valid" time="0.04" steps="102003"/></proof>
      <proof prover="3" memlimit="2000"><result status="valid" time="0.02" steps="50"/></proof>
      <proof prover="4" timelimit="5" memlimit="2000"><result status="valid" time="0.12" steps="28769"/></proof>
      <transf name="inline_goal" proved="true" >
       <goal name="rank_cancel&#39;vc.1.0.0.0.1.0" expl="VC for rank_cancel" proved="true">
       <proof prover="2" timelimit="30" memlimit="4000"><result status="valid" time="0.04" steps="109521"/></proof>
       <proof prover="3"><result status="valid" time="0.02" steps="105"/></proof>
       <proof prover="4" timelimit="30" memlimit="4000"><result status="valid" time="0.12" steps="29245"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="rank_cancel&#39;vc.1.0.1" expl="VC for rank_cancel" proved="true">
    <proof prover="2" timelimit="5" memlimit="2000"><result status="valid" time="0.04" steps="101963"/></proof>
    <proof prover="3" memlimit="2000"><result status="valid" time="0.01" steps="14"/></proof>
    <proof prover="4" timelimit="5" memlimit="2000"><result status="valid" time="0.09" steps="26846"/></proof>
    <transf name="inline_goal" proved="true" >
     <goal name="rank_cancel&#39;vc.1.0.1.0" expl="VC for rank_cancel" proved="true">
     <proof prover="2" timelimit="30" memlimit="4000"><result status="valid" time="0.05" steps="106026"/></proof>
     <proof prover="3"><result status="valid" time="0.02" steps="84"/></proof>
     <proof prover="4" timelimit="30" memlimit="4000"><result status="valid" time="0.11" steps="29199"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="rank_cancel&#39;vc.2" expl="precondition" proved="true">
  <proof prover="2" timelimit="5" memlimit="2000"><result status="valid" time="0.02" steps="4690"/></proof>
  <proof prover="3" memlimit="2000"><result status="valid" time="0.01" steps="12"/></proof>
  <proof prover="4" timelimit="5" memlimit="2000"><result status="valid" time="0.07" steps="24114"/></proof>
  <transf name="inline_goal" proved="true" >
   <goal name="rank_cancel&#39;vc.2.0" expl="precondition" proved="true">
   <transf name="split_all_full" proved="true" >
    <goal name="rank_cancel&#39;vc.2.0.0" expl="VC for rank_cancel" proved="true">
    <proof prover="2" timelimit="5" memlimit="2000"><result status="valid" time="0.07" steps="101893"/></proof>
    <proof prover="3" memlimit="2000"><result status="valid" time="0.02" steps="14"/></proof>
    <proof prover="4" timelimit="5" memlimit="2000"><result status="valid" time="0.13" steps="26846"/></proof>
    <transf name="inline_goal" proved="true" >
     <goal name="rank_cancel&#39;vc.2.0.0.0" expl="VC for rank_cancel" proved="true">
     <transf name="split_all_full" proved="true" >
      <goal name="rank_cancel&#39;vc.2.0.0.0.0" expl="VC for rank_cancel" proved="true">
      <proof prover="2" timelimit="5" memlimit="2000"><result status="valid" time="0.04" steps="102009"/></proof>
      <proof prover="3" memlimit="2000"><result status="valid" time="0.02" steps="52"/></proof>
      <proof prover="4" timelimit="5" memlimit="2000"><result status="valid" time="0.14" steps="28775"/></proof>
      <transf name="inline_goal" proved="true" >
       <goal name="rank_cancel&#39;vc.2.0.0.0.0.0" expl="VC for rank_cancel" proved="true">
       <proof prover="2" timelimit="30" memlimit="4000"><result status="valid" time="0.05" steps="109803"/></proof>
       <proof prover="3"><result status="valid" time="0.02" steps="118"/></proof>
       <proof prover="4" timelimit="30" memlimit="4000"><result status="valid" time="0.12" steps="29322"/></proof>
       </goal>
      </transf>
      </goal>
      <goal name="rank_cancel&#39;vc.2.0.0.0.1" expl="VC for rank_cancel" proved="true">
      <proof prover="2" timelimit="5" memlimit="2000"><result status="valid" time="0.07" steps="102003"/></proof>
      <proof prover="3" memlimit="2000"><result status="valid" time="0.02" steps="50"/></proof>
      <proof prover="4" timelimit="5" memlimit="2000"><result status="valid" time="0.13" steps="28769"/></proof>
      <transf name="inline_goal" proved="true" >
       <goal name="rank_cancel&#39;vc.2.0.0.0.1.0" expl="VC for rank_cancel" proved="true">
       <proof prover="2" timelimit="30" memlimit="4000"><result status="valid" time="0.05" steps="109521"/></proof>
       <proof prover="3"><result status="valid" time="0.03" steps="105"/></proof>
       <proof prover="4" timelimit="30" memlimit="4000"><result status="valid" time="0.13" steps="29245"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="rank_cancel&#39;vc.2.0.1" expl="VC for rank_cancel" proved="true">
    <proof prover="2" timelimit="5" memlimit="2000"><result status="valid" time="0.03" steps="101963"/></proof>
    <proof prover="3" memlimit="2000"><result status="valid" time="0.02" steps="14"/></proof>
    <proof prover="4" timelimit="5" memlimit="2000"><result status="valid" time="0.09" steps="26846"/></proof>
    <transf name="inline_goal" proved="true" >
     <goal name="rank_cancel&#39;vc.2.0.1.0" expl="VC for rank_cancel" proved="true">
     <proof prover="2" timelimit="30" memlimit="4000"><result status="valid" time="0.04" steps="106026"/></proof>
     <proof prover="3"><result status="valid" time="0.02" steps="84"/></proof>
     <proof prover="4" timelimit="30" memlimit="4000"><result status="valid" time="0.12" steps="29199"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="rank_cancel_array&#39;vc" expl="VC for rank_cancel_array" proved="true">
 <proof prover="3"><result status="valid" time="0.01" steps="3"/></proof>
 </goal>
 <goal name="rank_cancel_test&#39;vc" expl="VC for rank_cancel_test">
 <proof prover="2" obsolete="true"><result status="timeout" time="1.00" steps="2696130"/></proof>
 <proof prover="3" timelimit="1" obsolete="true"><result status="timeout" time="1.00"/></proof>
 <proof prover="4" obsolete="true"><result status="timeout" time="1.00" steps="327505"/></proof>
 <transf name="split_vc" >
  <goal name="rank_cancel_test&#39;vc.0" expl="precondition">
  <proof prover="2" obsolete="true"><result status="timeout" time="1.00" steps="2679555"/></proof>
  <proof prover="3" timelimit="1" obsolete="true"><result status="timeout" time="1.00"/></proof>
  <proof prover="4" obsolete="true"><result status="timeout" time="1.00" steps="344649"/></proof>
  <transf name="split_vc" >
   <goal name="rank_cancel_test&#39;vc.0.0" expl="precondition">
   <proof prover="2" timelimit="5" memlimit="2000" obsolete="true"><result status="timeout" time="5.00" steps="7500763"/></proof>
   <proof prover="3" memlimit="2000" obsolete="true"><result status="timeout" time="5.00"/></proof>
   <proof prover="4" timelimit="5" memlimit="2000" obsolete="true"><result status="timeout" time="5.00" steps="2207700"/></proof>
   <transf name="inline_goal" >
    <goal name="rank_cancel_test&#39;vc.0.0.0" expl="precondition">
    <transf name="split_all_full" >
     <goal name="rank_cancel_test&#39;vc.0.0.0.0" expl="precondition">
     <proof prover="2" timelimit="30" memlimit="4000" obsolete="true"><result status="timeout" time="30.00" steps="94307247"/></proof>
     <proof prover="3" timelimit="30" memlimit="4000" obsolete="true"><result status="timeout" time="30.00"/></proof>
     <proof prover="4" timelimit="30" memlimit="4000" obsolete="true"><result status="timeout" time="30.00" steps="10677698"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="rank_cancel_test&#39;vc.0.1" expl="precondition">
   <proof prover="2" timelimit="5" memlimit="2000" obsolete="true"><result status="timeout" time="5.00" steps="45909544"/></proof>
   <proof prover="3" memlimit="2000" obsolete="true"><result status="timeout" time="5.00"/></proof>
   <proof prover="4" timelimit="5" memlimit="2000" obsolete="true"><result status="timeout" time="5.00" steps="1972706"/></proof>
   <transf name="inline_goal" >
    <goal name="rank_cancel_test&#39;vc.0.1.0" expl="precondition">
    <transf name="split_all_full" >
     <goal name="rank_cancel_test&#39;vc.0.1.0.0" expl="VC for rank_cancel_test">
     <proof prover="2" timelimit="5" memlimit="2000" obsolete="true"><result status="timeout" time="5.00" steps="18407629"/></proof>
     <proof prover="3" memlimit="2000" obsolete="true"><result status="timeout" time="5.00"/></proof>
     <proof prover="4" timelimit="5" memlimit="2000" obsolete="true"><result status="timeout" time="5.00" steps="1790039"/></proof>
     <transf name="inline_goal" >
      <goal name="rank_cancel_test&#39;vc.0.1.0.0.0" expl="VC for rank_cancel_test">
      <proof prover="2" timelimit="30" memlimit="4000" obsolete="true"><result status="timeout" time="30.00" steps="92749610"/></proof>
      <proof prover="3" timelimit="30" memlimit="4000" obsolete="true"><result status="timeout" time="30.00"/></proof>
      <proof prover="4" timelimit="30" memlimit="4000" obsolete="true"><result status="timeout" time="55.00" steps="19756965"/></proof>
      </goal>
     </transf>
     </goal>
     <goal name="rank_cancel_test&#39;vc.0.1.0.1" expl="VC for rank_cancel_test">
     <proof prover="2" timelimit="5" memlimit="2000" obsolete="true"><result status="timeout" time="5.00" steps="14770021"/></proof>
     <proof prover="3" memlimit="2000" obsolete="true"><result status="timeout" time="5.00"/></proof>
     <proof prover="4" timelimit="5" memlimit="2000" obsolete="true"><result status="timeout" time="5.00" steps="1772779"/></proof>
     <transf name="inline_goal" >
      <goal name="rank_cancel_test&#39;vc.0.1.0.1.0" expl="VC for rank_cancel_test">
      <proof prover="2" timelimit="30" memlimit="4000" obsolete="true"><result status="timeout" time="30.00" steps="81555034"/></proof>
      <proof prover="3" timelimit="30" memlimit="4000" obsolete="true"><result status="timeout" time="30.00"/></proof>
      <proof prover="4" timelimit="30" memlimit="4000" obsolete="true"><result status="timeout" time="30.00" steps="9580206"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
</theory>
</file>
</why3session>
